{"ast":null,"code":"import { getCookie } from \"./session_token\";\nconst BASE_URL = \"http://localhost:8000/api\";\nexport const signup = async (username, password) => {\n  let resp = await request(\"/signup/\", \"POST\", true, {}, JSON.stringify({\n    username: username,\n    password: password\n  }));\n  const status = resp.status;\n  resp = await resp.json();\n  return {\n    ...resp,\n    status: status\n  };\n};\nexport const login = async (username, password) => {\n  let resp = await request(\"/login/\", \"POST\", true, {}, JSON.stringify({\n    username: username,\n    password: password\n  }));\n  const status = resp.status;\n  resp = await resp.json();\n  return {\n    ...resp,\n    status: status\n  };\n};\nexport const getRooms = async () => {\n  var _getCookie;\n  const csrfToken = (_getCookie = getCookie('csrftoken')) !== null && _getCookie !== void 0 ? _getCookie : \"\";\n  let resp = await request(\"/my_rooms/\", \"GET\", true, {\n    'X-CSRFToken': csrfToken\n  });\n  resp = await resp.json();\n  return resp;\n};\nexport const createGame = async name => {\n  var _getCookie2;\n  const csrfToken = (_getCookie2 = getCookie('csrftoken')) !== null && _getCookie2 !== void 0 ? _getCookie2 : \"\";\n  let resp = await request(\"/create_room/\", \"POST\", true, {\n    'X-CSRFToken': csrfToken\n  }, JSON.stringify({\n    opponent_username: name\n  }));\n  const status = resp.status;\n  resp = await resp.json();\n  return {\n    ...resp,\n    status: status\n  };\n};\nexport const getGameRoom = async id => {\n  var _getCookie3;\n  const csrfToken = (_getCookie3 = getCookie('csrftoken')) !== null && _getCookie3 !== void 0 ? _getCookie3 : \"\";\n  let resp = await request(`/my_room/${id}/`, \"GET\", true, {\n    'X-CSRFToken': csrfToken\n  });\n  const status = resp.status;\n  resp = await resp.json();\n  return resp;\n};\nexport const reqGameRoom = async (id, room) => {\n  var _getCookie4;\n  const csrfToken = (_getCookie4 = getCookie('csrftoken')) !== null && _getCookie4 !== void 0 ? _getCookie4 : \"\";\n  let resp = await request(`/my_room/${id}/`, \"POST\", true, {\n    'X-CSRFToken': csrfToken\n  }, JSON.stringify({\n    ...room\n  }));\n  const status = resp.status;\n  resp = await resp.json();\n  return resp;\n};\nexport const reqGameTurn = async (id, cell) => {\n  var _getCookie5;\n  const csrfToken = (_getCookie5 = getCookie('csrftoken')) !== null && _getCookie5 !== void 0 ? _getCookie5 : \"\";\n  let resp = await request(`/my_room/${id}/update/${cell.x}/${cell.y}/`, \"PUT\", true, {\n    'X-CSRFToken': csrfToken\n  }, JSON.stringify({\n    has_ship: cell.has_ship,\n    is_shot: cell.is_shot,\n    is_mis_shot: cell.is_mis_shot\n  }));\n  const status = resp.status;\n  resp = await resp.json();\n  return resp;\n};\nexport const reqGameDel = async id => {\n  var _getCookie6;\n  const csrfToken = (_getCookie6 = getCookie('csrftoken')) !== null && _getCookie6 !== void 0 ? _getCookie6 : \"\";\n  let resp = await request(`/my_room/${id}/delete/`, \"DELETE\", true, {\n    'X-CSRFToken': csrfToken\n  });\n};\nconst request = async (url, method, credentials, headers, body = null) => {\n  const baseUrl = \"http://localhost:8000/\"; // Используйте правильную переменную окружения\n  if (!baseUrl) {\n    throw new Error('Base URL is not defined');\n  }\n  const response = await fetch(`${baseUrl}${url}`, {\n    method: method,\n    credentials: credentials ? \"include\" : undefined,\n    // или null, если не нужно передавать cookies\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers\n    },\n    body: body\n  });\n  if (!response.ok) {\n    if (response.status >= 400) {\n      const errorText = await response.text();\n      throw new Error(`Ошибка сервера: ${response.status} - ${errorText}`);\n    }\n  }\n  return response;\n};","map":{"version":3,"names":["getCookie","BASE_URL","signup","username","password","resp","request","JSON","stringify","status","json","login","getRooms","_getCookie","csrfToken","createGame","name","_getCookie2","opponent_username","getGameRoom","id","_getCookie3","reqGameRoom","room","_getCookie4","reqGameTurn","cell","_getCookie5","x","y","has_ship","is_shot","is_mis_shot","reqGameDel","_getCookie6","url","method","credentials","headers","body","baseUrl","Error","response","fetch","undefined","ok","errorText","text"],"sources":["C:/Users/user/Desktop/Battleships/Front/src/utils/api.ts"],"sourcesContent":["import { METHODS } from \"http\";\r\nimport { AuthResponse, GameSectionType, CreateGameMessage, RoomType, RoomMessage, CellType } from '../types/types';\r\nimport { getCookie } from \"./session_token\";\r\n\r\n\r\nconst BASE_URL = \"http://localhost:8000/api\";\r\n\r\nexport const signup = async (username: string, password: string): Promise<AuthResponse> => {\r\n    let resp = await request(\"/signup/\", \"POST\", true, {}, JSON.stringify({username: username, password: password}));\r\n    const status = resp.status\r\n    resp = await resp.json();\r\n    return {\r\n        ...resp,\r\n        status: status\r\n    };\r\n}\r\n\r\nexport const login = async (username: string, password: string): Promise<AuthResponse> => {\r\n    let resp = await request(\"/login/\", \"POST\", true, {}, JSON.stringify({username: username, password: password}));\r\n    const status = resp.status\r\n    resp = await resp.json();\r\n    return {\r\n          ...resp,\r\n          status: status\r\n    };\r\n}\r\n\r\nexport const getRooms = async (): Promise<GameSectionType[]> => {\r\n    const csrfToken = getCookie('csrftoken') ?? \"\";\r\n    let resp = await request(\"/my_rooms/\", \"GET\", true, {'X-CSRFToken': csrfToken});\r\n    resp = await resp.json();\r\n    return resp;\r\n}\r\n\r\nexport const createGame = async (name: string): Promise<CreateGameMessage> => {\r\n    const csrfToken = getCookie('csrftoken') ?? \"\";\r\n    let resp = await request(\"/create_room/\", \"POST\", true, {'X-CSRFToken': csrfToken}, JSON.stringify({\r\n      opponent_username: name\r\n    }));\r\n    const status = resp.status\r\n    resp = await resp.json();\r\n    return {\r\n          ...resp,\r\n          status: status\r\n    };\r\n}\r\n\r\nexport const getGameRoom = async (id: string): Promise<RoomType> => {\r\n    const csrfToken = getCookie('csrftoken') ?? \"\";\r\n    let resp = await request(`/my_room/${id}/`, \"GET\", true, {'X-CSRFToken': csrfToken});\r\n    const status = resp.status\r\n    resp = await resp.json();\r\n    return resp;\r\n}\r\n\r\nexport const reqGameRoom = async (id: string, room: RoomType): Promise<RoomMessage> => {\r\n    const csrfToken = getCookie('csrftoken') ?? \"\";\r\n    let resp = await request(`/my_room/${id}/`, \"POST\", true, {'X-CSRFToken': csrfToken},\r\n      JSON.stringify({\r\n        ...room\r\n      })\r\n    );\r\n    const status = resp.status\r\n    resp = await resp.json();\r\n    return resp;\r\n}\r\n\r\nexport const reqGameTurn = async (id: string, cell: CellType): Promise<RoomType> => {\r\n    const csrfToken = getCookie('csrftoken') ?? \"\";\r\n    let resp = await request(`/my_room/${id}/update/${cell.x}/${cell.y}/`, \"PUT\", true, {'X-CSRFToken': csrfToken}, JSON.stringify({\r\n      has_ship: cell.has_ship,\r\n      is_shot: cell.is_shot,\r\n      is_mis_shot: cell.is_mis_shot\r\n    }));\r\n    const status = resp.status\r\n    resp = await resp.json();\r\n    return resp;\r\n}\r\n\r\nexport const reqGameDel = async (id: string) => {\r\n    const csrfToken = getCookie('csrftoken') ?? \"\";\r\n    let resp = await request(`/my_room/${id}/delete/`, \"DELETE\", true, {'X-CSRFToken': csrfToken});\r\n}\r\n\r\nconst request = async (url: string, method: string, credentials: boolean, headers: HeadersInit, body: BodyInit | null = null): Promise<any> => {\r\n    const baseUrl = \"http://localhost:8000/\";  // Используйте правильную переменную окружения\r\n    if (!baseUrl) {\r\n        throw new Error('Base URL is not defined');\r\n    }\r\n\r\n    const response = await fetch(`${baseUrl}${url}`, \r\n    {\r\n        method: method,\r\n        credentials: credentials ? \"include\" : undefined,  // или null, если не нужно передавать cookies\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            ...headers,\r\n        },\r\n        body: body,\r\n    });\r\n\r\n    if (!response.ok) {\r\n        if (response.status >= 400) {\r\n            const errorText = await response.text();\r\n            throw new Error(`Ошибка сервера: ${response.status} - ${errorText}`);\r\n        }\r\n    }\r\n\r\n    return response;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}